# -*- coding: utf-8 -*-
"""diabetes2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RVF8umQtq29Yx6HmQ31_ZuJwTU38Gk10

Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis"""

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.tail()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""seperating labels and data"""

X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']
print(X)
print(Y)

"""data standardisation!"""

scalar = StandardScaler()

standardized_data = scalar.fit_transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify = Y, random_state = 2)

"""training the model"""

classifier = svm.SVC(kernel = 'linear')

classifier.fit(X_train, Y_train)

"""model evaluation"""

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print(training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print(test_data_accuracy)

"""Making a prediction system:"""

input_data = (7,152,88,44,0,50,0.337,36,)

#converting list to np array
input_data_to_np = np.asarray(input_data)

#reshaping
input_data_reshape = input_data_to_np.reshape(1,-1)

#standardising
std_data = scalar.fit_transform(input_data_reshape)

prediction = classifier.predict(std_data)

print(prediction)

if(prediction == 0):
  print("Hurray you dont have diabetes!! :-}")
else:
  print("Iam very sorry to say this But, you have diabetes -,__-,")

"""Saving the trained model"""

import pickle

filename = 'trained_model.sav'
pickle.dump(classifier, open(filename, 'wb'))

"""Loading the saved model"""

loaded_model = pickle.load(open('trained_model.sav','rb'))

input_data = (7,152,88,44,0,50,0.337,36)

#converting list to np array
input_data_to_np = np.asarray(input_data)

#reshaping
input_data_reshape = input_data_to_np.reshape(1,-1)

#standardising
std_data = scalar.fit_transform(input_data_reshape)

prediction = loaded_model.predict(std_data)

print(prediction)

if(prediction == 0):
  print("Hurray you dont have diabetes!! :-}")
else:
  print("Iam very sorry to say this But, you have diabetes -,__-,")